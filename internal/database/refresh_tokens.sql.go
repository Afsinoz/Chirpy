// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefToken = `-- name: CreateRefToken :one

INSERT INTO refresh_tokens (token, created_at, updated_at, expires_at, revoked_at, user_id) 
VALUES (
    $1,
    NOW(),
    NOW(),
    NOW() + interval '60 days',
    NULL,
    $2
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefTokenParams struct {
	Token  string
	UserID uuid.NullUUID
}

func (q *Queries) CreateRefToken(ctx context.Context, arg CreateRefTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id, expires_at, revoked_at FROM refresh_tokens 
WHERE token=$1
`

type GetUserFromRefreshTokenRow struct {
	UserID    uuid.NullUUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (GetUserFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i GetUserFromRefreshTokenRow
	err := row.Scan(&i.UserID, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const revokeRefToken = `-- name: RevokeRefToken :exec
UPDATE refresh_tokens
SET revoked_at=$1, updated_at=$2
WHERE token=$3
`

type RevokeRefTokenParams struct {
	RevokedAt sql.NullTime
	UpdatedAt time.Time
	Token     string
}

func (q *Queries) RevokeRefToken(ctx context.Context, arg RevokeRefTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefToken, arg.RevokedAt, arg.UpdatedAt, arg.Token)
	return err
}
